#include <iostream>
#include <algorithm>
#include <windows.h>
#include <stdlib.h>
using namespace std;

int main()
{
	system("chcp 1251"); //установка русского языка
	SetConsoleCtrlHandler(NULL, TRUE); //изменение стандартного поведения при сигнале ctrl+c
	bool f = true; //инициализация переменной проверки для цикла while
	double M, ch; //инициализация переменных M - размер матрицы, ch - элемент матрицы
	while (f) //пока пользователь вводит некорректные значения матрицы, f остается true и программа просит ввести размер заново
	{
		cout << "Введите размер квадратной матрицы (число в диапазоне [2;5]): ";
		cin >> M; //ввод размера квадратной матрицы с клавиатуры
		if ((cin.good()) and (M >= 2) and (M <= 5) and int(M) == M) //если размер является целым числом в диапазоне [2;5]
		{
			f = false; //переменная проверки становится false и цикл while прерывается
			cin.clear(); //сброс входных данных
		}
		else
		{
			cout << "Неверное значение. ";
			cin.clear(); //сброс входных данных
			cin.ignore((numeric_limits<streamsize>::max)(), '\n'); //игнорирование остатка строки
		}
	}
	int* Matr = new int[M * M]; //инициализация матрицы размера M на M 
	int way = 0; //инициализация переменной, отвечающей за способ заполнения матрицы
	cout << "Введите способ заполнения матрицы: 1 - вручную, 2 - автоматически\n";
	cin >> way;//ввод номера способа с клавиатуры
	switch (way) //проверка введенного значения
	{
	case 1: //если введена 1
	{
		for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
		{
			for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
			{
				cout << "Введите число в диапазоне [1;100] " << i + 1 << " строки и " << j + 1 << " cтолбцa: ";
				cin >> ch; //ввод элемента матрицы с клавиатуры
				if (cin.good() and (ch >= 1) and (ch <= 100) and int(ch) == ch) //если элемент является целым числом в диапазоне [1;100]
				{
					Matr[i * (int)M + j] = ch; //добавление элемента в матрицу
					cin.clear(); //сброс входных данных
				}
				else
				{
					cout << "Неверное число. ";
					cin.clear(); //сброс входных данных
					cin.ignore((numeric_limits<streamsize>::max)(), '\n'); //игнорирование остатка строки
					j--; //уменьшения переменной, отвечающей за номер столбца, для повтора прохода по текущему столбцу
				}
			}
		}
		break;
	}
	case 2: //если введена 2
	{
		for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
		{
			for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
			{
				ch = rand() % 100 + 1; //генерация случайного числа
				Matr[i * (int)M + j] = ch; //добавление элемента в матрицу
			}
		}
		break;
	}
	}
	int* mas = new int[M]; //инициализация массива размера M
	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
	{
		mas[i] = Matr[i * (int)M + (int)M - 1 - i]; //добавление элементов побочной диагонали матрицы в массив
	}
	sort(mas, mas + (int)M, greater<int>()); //сортировка массива по убыванию
	double N; //инициализация переменной требуемого номера минимума 
	while (!f) //пока пользователь вводит некорректное значение минимума, f остается false и программа просит ввести номер заново
	{
		cout << "\nВведите номер минимума: ";
		cin >> N; //ввод номера минимума с клавиатуры
		if (cin.good() and (int)N == N and N <= M) //если введенный номер является целым числом меньше размера матрицы
		{
			f = true; //переменная проверки становится true и цикл while прерывается
			cout << N << "-й минимум равен " << mas[(int)M - (int)N] << endl;
			cin.clear(); //сброс входных данных
		}
		else
		{
			cout << "Неверное число.\n";
			cin.clear(); //сброс входных данных
			cin.ignore((numeric_limits<streamsize>::max)(), '\n'); //игнорирование остатка строки
		}
	}
	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
	{
		for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
		{
			Matr[i * (int)M + j] *= -1; //умножение всех элементов матрицы на -1
		}
	}
	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
	{
		Matr[i * (int)M + (int)M - 1 - i] = mas[i]; //замена элементов побочной диагонали матрицы элементами массива
	}
	cout << "\nРезультат обработки матрицы:";
	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
	{
		cout << "\n";
		for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
		{
			cout << Matr[i * (int)M + j] << "\t"; //вывод элементов преобразованной матрицы
		}
	}
}










//#include <iostream>
//#include <algorithm>
//using namespace std;
//int main()
//{
//	system("chcp 1251");
//	bool f = true;
//	string m;
//	double ch;
//	int M;
//	while (f) 
//	{
//		cout << "Введите размер квадратной матрицы (число в диапазоне [2;5]): ";
//		cin >> m;
//		M = m[0] - '0';
//		if ((M >= 2) and (M <= 5) and m.length()==1)
//		{
//			f = false;
//		}
//		else
//		{
//			cout << "Неверное значение. ";
//		}
//	}
//	int *Matr = new int[M * M];
//	for (int i = 0; i < (int)M; i++)
//	{
//		for (int j = 0; j < (int)M; j++)
//		{
//			cout << "Введите число в диапазоне [1;100] " << i + 1 << " строки и " << j + 1 << " cтолбцa: ";
//			cin >> ch;
//			if ((ch >= 1) and (ch <= 100) and int(ch) == ch)
//			{
//				Matr[i*(int)M + j] = ch;
//			}
//			else
//			{
//				cout << "Неверное число. ";
//				j--;
//			}
//		}
//	}
//	int *mas = new int[M];
//	for (int i = 0; i < (int)M; i++)
//	{
//		mas[i] = Matr[i * (int)M + (int)M - 1 - i];
//		//cout<< Matr[i*(int)M+(int)M-1-i]<<endl;
//	}
//	sort(mas,mas+(int)M, greater<int>());
//	//cout << "Осортированные по убыванию элементы побочной диагонали: ";
//	//for (int i = 0; i < (int)M; i++)
//	//{
//	//	cout << mas[i] << " ";
//	//}
//	double N;
//	while (!f)
//	{
//		cout << "\nВведите номер минимума: ";
//		cin >> N;
//		if ((int)N == N and N <= M)
//			{
//				f = true;
//				cout << N << "-й минимум равен " << mas[(int)M - (int)N] << endl;
//			}
//		else
//		{
//			cout << "Неверное число.\n";
//		}
//	}
//	for (int i = 0; i < (int)M; i++)
//	{
//		for (int j = 0; j < (int)M; j++)
//		{
//			Matr[i * (int)M + j] *= -1;
//			
//		}
//	}
//	for (int i = 0; i < (int)M; i++)
//	{
//		Matr[i * (int)M + (int)M - 1 - i] = mas[i];
//	}
//	cout << "\nРезультат обработки матрицы:";
//	for (int i = 0; i < (int)M; i++)
//	{
//		cout << "\n";
//		for (int j = 0; j < (int)M; j++)
//		{
//			cout << Matr[i * (int)M + j] << "\t";
//		}
//	}
//}



//#include <iostream>
//#include <algorithm>
//#include <windows.h>
//using namespace std;
//
//int main()
//{
//	system("chcp 1251"); //установка русского языка
//	SetConsoleCtrlHandler(NULL, TRUE); //изменение стандартного поведения при сигнале ctrl+c
//	bool f = true; //инициализация переменной проверки для цикла while
//	double M, ch; //инициализация переменных M - размер матрицы, ch - элемент матрицы
//	while (f) //пока пользователь вводит некорректные значения матрицы, f остается true и программа просит ввести размер заново
//	{
//		cout << "Введите размер квадратной матрицы (число в диапазоне [2;5]): ";
//		cin >> M; //ввод размера квадратной матрицы с клавиатуры
//		if ((cin.good()) and (M >= 2) and (M <= 5) and int(M) == M) //если размер является целым числом в диапазоне [2;5]
//		{
//			f = false; //переменная проверки становится false и цикл while прерывается
//			cin.clear(); //сброс входных данных
//		}
//		else
//		{
//			cout << "Неверное значение. ";
//			cin.clear(); //сброс входных данных
//			cin.ignore((numeric_limits<streamsize>::max)(), '\n'); //игнорирование остатка строки
//		}
//	}
//	int* Matr = new int[M * M]; //инициализация матрицы размера M на M 
//	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
//	{
//		for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
//		{
//			cout << "Введите число в диапазоне [1;100] " << i + 1 << " строки и " << j + 1 << " cтолбцa: ";
//			cin >> ch; //ввод элемента матрицы с клавиатуры
//			if (cin.good() and (ch >= 1) and (ch <= 100) and int(ch) == ch) //если элемент является целым числом в диапазоне [1;100]
//			{
//				Matr[i * (int)M + j] = ch; //добавление элемента в матрицу
//				cin.clear(); //сброс входных данных
//			}
//			else
//			{
//				cout << "Неверное число. ";
//				cin.clear(); //сброс входных данных
//				cin.ignore((numeric_limits<streamsize>::max)(), '\n'); //игнорирование остатка строки
//				j--; //повтор прохода по текущему столбцу
//			}
//		}
//	}
//	int* mas = new int[M]; //инициализация массива размера M
//	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
//	{
//		mas[i] = Matr[i * (int)M + (int)M - 1 - i]; //добавление элементов побочной диагонали матрицы в массив
//	}
//	sort(mas, mas + (int)M, greater<int>()); //сортировка массива по убыванию
//	//cout << "Осортированные по убыванию элементы побочной диагонали: ";
//	//for (int i = 0; i < (int)M; i++)
//	//{
//	//	cout << mas[i] << " ";
//	//}
//	double N; //инициализация переменной требуемого номера минимума 
//	while (!f) //пока пользователь вводит некорректное значение минимума, f остается false и программа просит ввести номер заново
//	{
//		cout << "\nВведите номер минимума: ";
//		cin >> N; //ввод номера минимума с клавиатуры
//		if (cin.good() and (int)N == N and N <= M) //если введенный номер является целым числом меньше размера матрицы
//		{
//			f = true; //переменная проверки становится true и цикл while прерывается
//			cout << N << "-й минимум равен " << mas[(int)M - (int)N] << endl;
//			cin.clear(); //сброс входных данных
//		}
//		else
//		{
//			cout << "Неверное число.\n";
//			cin.clear(); //сброс входных данных
//			cin.ignore((numeric_limits<streamsize>::max)(), '\n'); //игнорирование остатка строки
//		}
//	}
//	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
//	{
//		for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
//		{
//			Matr[i * (int)M + j] *= -1; //умножение всех элементов матрицы на -1
//		}
//	}
//	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
//	{
//		Matr[i * (int)M + (int)M - 1 - i] = mas[i]; //замена элементов побочной диагонали матрицы элементами массива
//	}
//	cout << "\nРезультат обработки матрицы:";
//	for (int i = 0; i < (int)M; i++) //цикл, проходящий по строкам матрицы
//	{
//		cout << "\n";
//		for (int j = 0; j < (int)M; j++) //цикл, проходящий по столбцам матрицы
//		{
//			cout << Matr[i * (int)M + j] << "\t"; //вывод элементов преобразованной матрицы
//		}
//	}
//}


